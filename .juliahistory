events(:butler)
events[:butler]
zeros(2,2,2)
events
domain = events
variables = collect(keys(domain))
[variables[i]=>i for i=1:length(variables)]
[domain[key] for key in domain]
[domain[key] for key in keys(domain)]
[length(domain[key]) for key in keys(domain)]
tuple([length(domain[key]) for key in keys(domain)])
help(tuple)
tuple([1,2,3])
tuple([1,2,3]...)
[1,2,3]...
tuple([length(domain[key]) for key in keys(domain)]...)
tuple([length(domain[key]) for key in keys(domain)]...)
dims = tuple([length(domain[key]) for key in keys(domain)]...)
variables
zeros(dims)
dims = tuple([length(domain[key]) for key in keys(domain)]...) end
dims = tuple([length(domain[key]) for key in keys(domain)]...)
domain
domain.get(:butler)
get(domain,:butler)
get(domain,:butler,1)
values(domain)
collect(values(domain))
length(ans)
[length(d) for d in collect(values(domain))]
help(collect)
variables
tuple
help(tuple)
tuple(3)
tuple(variables)
tuple(variables...)
typeof(ans)
domain = [:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]
variables = collect(keys(domain))
domain[:maid]
length(ans)
dims = ()
push!(dims,2)
dims = []
push!(dims,2)
dims = Int[]
push!(dims,2)
dims
push!(dims,2)
tuple(dims)
tuple(dims...)
domain
domain[:maid]
findin(domain[:maid],:murderer)
getindex(domain[:maid],:murderer)
find(x->:murderer,domain[:maid])
find((x)->:murderer,domain[:maid])
(x)->:murderer
x->x==:murderer
find(x->x==:murderer,domain[:maid])
[length(domain[key]) for key in variables]
p = PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p.variables
p.table
p.domain
find(x->x==:murderer,domain[:maid])
getindex
domain[:maid]
get(domain,:maid,0)
get
methods(get)
getindex(domain,:maid)
domain.vals
getindex(domain,:maid)
find(x->x==:murderer,domain[:maid])
find(x==:murderer,domain[:maid])
pot
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
getindex(p,:maid,:murderer)
p
p.domain
keys(p.domain)
collect(keys(p.domain))
collect(keys(p.domain))
variableDim = Dict{Symbol,Integer}
push!(variableDim, :a=>1)
push!(variableDim, {:a=>1})
push!(variableDim, [:a=>1])
variableDim = Dict{Symbol,Int}
push!(variableDim, [:a=>1])
setindex!(variableDim, :a, 1)
typeof(variableDim)
variableDim = Dict{Symbol,Int}()
typeof(variableDim)
setindex!(variableDim, :a, 1)
setindex!(variabldeDim,1,:a)
setindex!(variableDim,1,:a)
variableDim[:a]
variableDim = Dict{Symbol,Integer}()
setindex!(variableDim,1,:a)
domain
domain[:maid]
domain[:maid][1]
Potential
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]
Potential
abstract Potential
Potential
typeof(ans)
te
Potential
abstract Potential
a
b
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]
p
1+1
p
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p.keyDim
p.keyDomain
x = []
push!(x,1)
x = Integer[]
push!(x,1)
push!(x,2)
push!(x,3)
x
x...
[x...]
tuple(x)
tuple(x...)
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p.variables
p.table
p.domain
p.keyDomain
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p.variables
p.dimensions
p.domains
p
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
d=[:a=>1]
typeof(d)
d[:b] = 2
d
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[1]
p = PotArray([:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:butler=>[:murderer,:notmurderer]])
[1,2,3]
[1,2,3]...
tuple([1,2,3]...)
tuple(1,2,3)
1,2,3
zeros([1,2,3]...)
zeros(tuple([1,2,3]...))
p = b.PotArray([:butler=>[:murderer,:notmurderer]])
x = Int[]
x.push!(2)
push!(x,2)
Array
methods(Array)
Array(Int,3)
p = b.PotArray([:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:butler=>[:murderer,:notmurderer]])
p = b.PotArray([:butler=>[:murderer,:notmurderer]])
help(similar)
 p.domains
dom = p.domains[:butler]
dom[1]
dom = p.domain[variables[:butler]]
dom = p.domains[variables[:butler]]
dom = p.domains[p.variables[:butler]]
x
push!(x,3)
get(x,1)
get(x)
getindex(x,1)
getindex(x,2)
p = b.PotArray([:butler=>[:murderer,:notmurderer]])
size(p.table)
ndims(p.table)
p.variables
help(endof)
endof(p.table)
p.table
help(eltype)
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
collect(keys([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]))
[key for key in [:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]]
[item.key for item in [:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]]
:knife=>[:used,:notused]
[:knife=>[:used,:notused]]
typeof(ans)
x = [:knife=>[:used,:notused]]
x
key(x)
getkey(x)
x[1]
typeof(x)
x = [:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]
x
length(x)
x[1]
[:maid,:knife=>:used]
[:maid,[:knife=>:used]]
hash(:knife)
hash(:maid)
hash(:butler)
hash(:butler)
x(dims::Integer...) = length(dims)
temp(dims::Integer...) = length(dims)
temp(1)
temp(1,2,3)
temp(i, dims::Integer...) = dims[i]
temp(2, 1,2,3)
temp(dims::Integer...) = dims[1]
temp(1,2,3)
temp(dims::Integer...) = dims[3]
temp(1,2,4)
Symbol(1)
Symbol
help(Symbol)
methods(Symbol)
constructors(Symbol)
Symbol
where(Symbol)
where
isa(Vector,1)
isa(1,Vector)
isa([1],Vector)
d
keys(d)
keys(d)...
[keys(d)]
[keys(d)...]
x = [:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]]
x
[keys(x)...]
d
 :a
:a[1]
p
t = p.table
t[:]
t = resize(1:8, 2,2,2)
sizehint
reshape
reshape(1:8, 2,2,2)
t = reshape(1:8, 2,2,2)
t[:,:,1]
t[:,2,1]
p
t
t[2,:,:]
help(Array)
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p
p[[:maid=>:murderer]]
select
p[[:maid=>:murderer]]
p[[:maid=>:murderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
String(1)
string(1)
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
p[ans]
p[[:maid=>:murderer]]
p.table[":",":","1"]
t
t[":",":",1]
t
t[:,:,1]
:
a
(:)
help(Colon)
methods(Colon)
t
t[Colon,Colon,1]
t[Colon(),Colon(),1]
t[:,:,1]
t[:(:), :(:), 1]
which(t[:,:,1])
which(t)
typeof(:(:))
:(t[:,:,1])
x = ans
x
x.head
x.args
eval(x)
:(t[:(:), :(:), 1])
:(t[:,:,1])
t[(:),(:),1])
t[(:),(:),1]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
t[ans]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
x = {Colon(),Colon(),1}
eval9x)
ev
eval(x)
t
t[x]
t[eval(x)]
x
 t[x...]
getindex(t,:,:,1)
getindex(t,(:),(:),1)
which(t[1])
which
where
:(t[:,:,1])
x = ans
x.args
eval(x)
x.head
Expr(:ref, :t, :(:), :(:), 1)
Expr(:ref, :t, :, :, 1)
eval(ans)
Expr(:ref, :t, :(:), :(:), 1)
eval(ans)
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
eval(ans)
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer]]
eval(ans)
p[:maid=>:murderer]
p[[:maid=>:murderer,:knife=>:used]]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]]
eval(ans)
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]]
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
which(:ref)
:(x+1)
ans.args
:(x + 1 2)
:(+ x 1 2)
:(+(x,1,2))
ans.args
:(x + 1, 2)
ans.args
2(2)
3(4)
(3)4
dump(ans)
Expr(:ref, :t, :(:), :(:), 1)
dump(ans)
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]]
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
setindex!
expr
exp
ex
x
t
t[1] = 0.1
t[1] = 1
t
:(t[1] = 1)
dump(ans)
x
dump(x)
x
eval(x)
t
:(t[:,:,1] = [1 2; 3 4])
dump(ans)
x
x([1 1; 2 2])
eval(=(ex, [1 1; 2 2]))
eval(ex = [1 1; 2 2])
eval(ex = $[1 1; 2 2])
y = expr([1 1; 2 2])
y = Expr([1 1; 2 2])
y = :([1 1; 2 2])
dump(y)
x = y
:(t[:,:,1])
x = ans
x
y
Expr(:ref, t, 1)
dump(ans)
Expr(:=, x, y)
Expr(:(=), x, y)
dump(ans)
eval(Expr(:(=), x, y))
t
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
p
isa([0.1,0.2],Array{Real})
isa([0.1,0.2],Array{Real,1})
isa([0.1,0.2],Array{Float64,1})
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
:([0.1,0.2])
dump(ans)
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
Expr(:([0.1,0.2]))
typeof(x)
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
p
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:maid=>:murderer,:knife=>:used]] = [0.1,0.2]
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:knife=>:used,:butler=>:notmurderer,:maid=>:notmurderer]] = 0.3
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:knife=>:used,:butler=>:notmurderer,:maid=>:notmurderer]] = 0.3
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:knife=>:used,:butler=>:notmurderer,:maid=>:notmurderer]] = 0.3
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:knife=>:used,:butler=>:notmurderer,:maid=>:notmurderer]] = 0.3
p
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:knife=>:used,:butler=>:notmurderer,:maid=>:notmurderer]] = 0.3
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p[[:knife=>:used,:butler=>:notmurderer,:maid=>:notmurderer]] = 0.3
p[[:knife=>:used,:butler=>:notmurderer,:maid=>:murderer]] = 0.2
p[[:knife=>:used,:butler=>:murderer,:maid=>:notmurderer]] = 0.6
p[[:knife=>:used,:butler=>:murderer,:maid=>:murderer]] = 0.1
p.table
p[[:knife=>:notused]]
p[[:knife=>:used]]
p[[:knife=>:notused]] = p[[:knife=>:used]]
p.table
p[[:knife=>:notused]] = 1 - p[[:knife=>:used]]
p.table
t
ref(t,(:),(:),2)
ref(t,:(:),:(:),2)
ref(t,:(:),:(:),2)
ref(
t,1,1,1)
ref
assign
p = b.PotArray([:knife=>[:used,:notused],:maid=>[:murderer,:notmurderer],:butler=>[:murderer,:notmurderer]])
p
0.2
pot
pot[[:knife=>:used]]
dump(ans)
pot[[:knife=>:used,:butler=>:murderer]]
pot[[:maid=>:murderer]]
pot[[:maid=>:murderer,:knife=>used]]
pot[[:maid=>:murderer,:knife=>:used]]
pot[[:maid=>:murderer]]
1
