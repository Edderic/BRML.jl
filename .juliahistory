npr.gamma(2, 2, 2)
length(b)
dirRand(b,2)
b[1]
npr.gamma(b[1],1,2)
npr.gamma(b[1],1,2)
npr.gamma(b[1],1,1)
npr.gamma(-5,1,1)
npr.gamma(5,1,1)
dirRand([3 12 1], 1, 2)
dirRand([3 12 1], 2)
dirRand([3 12 1], 2)
s
r
s
r
s
s
b[1]
npr.gamma(4,1,2)
dirRand([3 12 1], 2)
s
s
s
s
r = zeros(3,2)
r[1]
r[1, 1]
r[1,:]
dirRand([3 12 1], 2)
s
s
s
npr.gamma(alpha[k],1,n)
s
s
s
r
mapslices(sum,r,1)
repmat(mapslices(sum,r,1),length(alpha),1)
s
dirRand([3 12 1], 2)
dirRand([3 12 1], 2)
dirRand([3 12 1], 2)
zeros(3)
dirrand(zeros(3),2)
dirRand(zeros(3),2)
dirRand(zeros(1,3),2)
zeros(1,3)
b
dirRand(ones(3,3),2)
ones(3,3)
length(ones(3,3))
size(ones(3,3))
a
length(a)
size(a)
size(a,2)
dirRand(ones(3,3),2)
size(ones(3,3),2)
zeros(3,2)
ones(3,3)[1]
ones(3,3)[2]
ones(3,3)[3]
ones(3,3)[4]
dirRand(ones(3),2)
dirRand(ones(3),2)
 dirRand([2 3 4], 2)
dirRand(a,2)
dirRand(ones(3), 2)
g = General
g.dirRand(ones(3), 2)
g.dirRand([2 3 4], 2)
typeof(AbstractVector)
help(AbstractVector)
help(Top)
edit(Top)
Top
typeof(Top)
describe
desc
logsumexp(a)
g.logsumexp(a)
a = [23 -44 16;18 21 0]
b=[-5 9 26]
g.logsumexp(a)
g.logsumexp(b)
g.logsumexp(b)
g.logsumexp(b)
g.logsumexp(a)
b
g.logsumexp(b)
g.logsumexp(vec(b))
abstract NumVector <: AbstractVector 
help(AbstractArray)

a = [2.2 23.3 8.9; 1.1 9.6 4.5]

b = [3.1 2.5 8.8]

c = [6.2, 1.8, 2.5]
logsumexp(a)
g.logsumexp(a)
g.logsumexp(b)
g.logsumexp(vec(b))
g.logsumexp(c)
g.logsumexp(c,2.2)
g.cap(c,3)
g.cap(b,3)
 g.condexp(a)
g.condexp(b)
g.condexp(c)
c
max(c)
c-max(c)
repmat(max(c),length(c),1)
repmat
c.-max(c)
c.condexp(a)
c.condexp(b)
g.condexp(a)
g.condexp(b)
g.condexp(c)
c
condp(exp(c-max(c)))
g.condp(exp(c-max(c)))
g.condp(exp(c-max(c)))
g.condp
g.condexp(c)
g.condexp
mapslices(max,c,1)
c
b
mapslices(max,b,1)
max(b)
mapslices(max,c,2)
repmat(8.8, 3,1)
mapslices(max,c,1)
typeof(ans)
g.condexp
g.condexp(c)
g.condexp
g=General
a
c
a = [2.2 23.3 8.9; 1.1 9.6 4.5]
b = [3.1 2.5 8.8]
c = [6.2, 1.8, 2.5]
g.condexp
g.condexp(c)
typeof(c)
isa(c,Array)
isa(c,AbstractArray)
g.condexp(b)
g.condexp(a)
g.condexp
isa(2,Number)
isa(1.2,Number)
typeof(a)
g.condexp
g.condexp(a)
isa(a,AbstractArray{Number,N})
isa(a,AbstractArray{Number,})
isa(a,AbstractArray{Number})
isa(a,AbstractArray{Number,2})
g.logsumexp(a)
g.logsumexp
g.logsumexp
g.logsumexp(a)
g.logsumexp(a)
g.logsumexp
g.logsumexp(a, ones(size(a)))
g.logsumexp(a, ones(size(a)))
g.logsumexp
g=General
g.logsumexp
g.logsumexp(a)
g.logsumexp(a, ones(size(a)))
g.logsumexp
g.logsumexp(a, ones(size(a)))
g.logsumexp(a)
help(None)
help(Int)
isa(2,Integer)
isa(2,Int)
g.logsumexp 
g.logsumexp
g=General
g.logsumexp
g.logsumexp(a)
g.logsumexp
g.logsumexp
g.logsumexp(a)
isa(a,Array{Float64,2})
isa(a,AbstractArray{Float64,2})
isa(a,AbstractArray{Number,2})
isa(a,AbstractArray{,2})
at
isa(a,AbstractArray{Float64,2})
isa(a,AbstractArray{Float64,Int})
isa(a,NumMatrix) 
isa(a,NumArray)
isa(a,g.NumArray)
g.logsumexp(a)
g.logsumexp
g.logsumexp(a) 
g.logsumexp(b)
g.logsumexp(c)
g.logsumexp(vec(b))
help(String)
help(ASCIIString)
help(DirectIndexString)
help(UTF8String)
using General
logsumexp
logsumexp
using General
logsumexp
isempty([])
isempty()
isempty(0)
isempty
setdiff
setdiff(a,b)
a
b
setdiff(b,c)
c
b
setdiff(b,c)
1+1
a
ndims(a)
Array(Int,2)
dims
ndims
ndims(1)
ndims(2)
ndims([1])
ndims([1,2])
ndims(c)
size(1)
size(c)
size(c,1)
c
tuple(c)
tuple(c...)
ccall((:gethostname, "libc"), Int32, (Ptr{Uint8}, Uint), hostname, length(hostname))
load
loadpath
ENV
LOAD_PATH
ccall
ccall((:argmax, "c:/Users/Shaun/code/julia/project/argmax.dll"), Float64, ())
ccall((:clocl, "libc"), Int32, ())
ccall((:g_type_init, "libgobject-2.0"), Void, ())
ccall((:clock, "libc"), Int32, ())
ccall((:clock, "libc"md), Int32, ())
ccall((:clock, "libcamd"), Int32, ())
ccall((:clock, "c:/libcamd"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd"), Int32, ()
)
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd.dll"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd.dll"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd.dlll"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd.dll"), Int32, ())
ccall((:, "C:/users/shaun/programs/julia/lib/julia/libcamd.dll"), Int32, ())
a = [2 19 4]
b = [13 26 33;11 10 9]
argmax(a)
a=[12 33 9]
b=[13 33 34;12 11 10]
armin(a)
argmin(a)
argmin2(a)
argmin(vec(a))
argmax(a)
argmax(vec(a))
argmin2([1 2 3])
using BRML
argmin2([1 2 3])
export
a
a
exportall
importall
a
logsumexp
g = BRML
g
g.logsumexp
g.argmin2([1:3])
g.argmin([1:3])
g.argmin([10 20 30])
[1:3]
a = g.argmin2([1:3])
a
typeof(a)
typeof(a)
reload("c:/Users/Shaun/dropbox/code/julia/project/general.jl")
using BRML
argmax2
using BRML
argmax3
using MATLAB
ABC
isdefined("abc")
isdefined(:abc)
isdefined(:MATLAB)
whos()
MATLAB.whos()
using MATLAB
whos()
isdefined(:MSession)
get_default_msession()
using MATLAB
get_default_msession(0)
get_default_msession
get_default_msession(); 
close_default_msession();
get_default_msession();
@matlab begin
pwd()
end
get_default_msession(); 
using MATLAB
get_default_msession();
@matlab begin
Engine *ep;
ep = engOpen(NULL);
engSetVisible(ep, 0);
end
@matlab engSetVisible(0)
session = get_default_msession()
using MATLAB
restart_default_msession(0)
get_default_msession()
get_default_msession().ep
get_default_msession().ptr
ep = get_default_msession().ptr
ep
ep.val
@matlab engSetvisible(0x1009eb50, 0)
val
@matlab engSetvisible(0x1009eb50, 0)
@matlab engSetvisible(0x1009eb50, 0)
@matlab pwd()
isdefined(:MATLAB)
isdefined(:MATLAB)
isdefined(get_current_msession)
isdefined(get_default_msession)
isdefined(:get_default_msession)
isdefined(:MATLAB)
isdefined(:a)
a
MATLAB
typeof(ans)
close_default_msession()
include("matlab.jl")
include("matlab.jl")
include("matlab.jl")
include("matlab.jl")
include("matlab.jl")
using BRML
argmax
BRML.argmax
argmax
argmax4
argmax3
argmax4([1:10])
argmax4([1:10])
argmax([1:10])
10.0 == 10
m_argmin
argmin2
x,y = [1 2]
x
y
x,y = [1,2]
x
y
x,y,z = [1,2]
bar3z
bar3z(a)
bar3z([1:10])
bar3z([1 2 3 4 5 6 7 8 9 10])
chi2test(1:10,0.1)
chi2test([1:10],0.1)
bar3z(1:10)
bar3z(1:10)
bar3z([1:10])
chi2test([1:10],0.2)
bar3z([1:10])
bar3z(1:10)
bar3z([1:10])
bar3z
reload("c:/Users/shaun/dropbox/code/julia/project/general.jl")
bar3z
bar3z
bar3z(1:10)
x = 1:10
typeof(x)
isa(x,AbstractArray)
help(AbstractArray)
bar3z
bar3z(1:10)
isa(1:10,NumArray)
help(NumArray)
help(AbstractArray)
bar3z
bar3z(1:10)
bar3z([1:10])
chi2test
load("c:/Users/sha
a
)
"
)
require("c:/Users/Shaun/code/julia/project/general.jl")
chi2test
restart()
exit()
include("c:/Users/shaun/skydrive/code/julia/brml/test/general.jl")
1
n
logsumexp
using BRML
logsumexp
scalar
    scalar = 5
    array = [27, 33, 16]
    vector = [11, 33, 22]
    matrix = [12 2 44;
              41 5 26]
    threedim = reshape(5:16, 2,2,3)


logsumexp
logsumexp(scalar0
)
logsumexp(scalar)
logsumexp(vector)
logsumexp(matrix)
logsumexp([])
logsumexp(array)
logsumexp(vector)
logsumexp(matrix)
roughly
roughly(5)(5.1)
roughly(5)(5.01)
roughly(5)(5.001)
roughly(5.01)(5.009)
roughly(5)(4.99999999)
roughly([5 6 7])([4.99999 5.999999 6.99999])
roughly([5 6 7])([4.99999 5.999999 6])
roughly([5,6,7])([4.99999 5.999999 6])
roughly([5,6,7])([4.99999 5.999999 6.999999999])
logsumexp(matrix)
logsumexP(vector)
logsumexp(vector)
logsumexp(array)
[x^2 for x in 1:10]
typeof(ans)
avgSigmaGauss(0.2, 0.3)
avgSigmaGauss(0, 0)
avgSigmaGauss()
avgSigmaGauss(1)
avgSigmaGauss(1:3,0.5)
avgSigmaGauss([1:3], 0.5)
avgSigmaGauss
cap(-3, 2.5)
cap([1:10], 5)
cap([-5:5], 1)
betaXbiggerY(0.1,0.2,0.3,0.4)
betaXgreaterBetaY
condexp(5)
condexp(array)
condexp(vector)
condexp([1:10])
dirRand(vector, 5)
dirRand
using BRML
using "src/BRML"
using src/BRML
using
BRML
using("c:/Users/shaun/skydrive/code/julia/brml/src/BRML.jl")
a
1+1
y
using BRML
argmin
using BRML
argmin
using BRML
using BRML
argmin
using BRML
argmin
