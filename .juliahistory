delta
dist .^ (xAlpha-1) .* (1-dist) .^ (xBeta-1)
                       .* sp.betainc(dist,yAlpha,yBeta)
dist .^ (xAlpha-1) .* (1-dist) .^ (xBeta-1) .* sp.betainc(dist,yAlpha,yBeta)
sp.betainc(dist,1,1)
sp.betainc(dist,yAlpha,yBeta)
yAlpha
yBeta
sp.betainc(dist,3,4)
sp.betainc(dist,0.1,0.2)
sp.betainc(2,0.1,0.2)
beta(2,3)
sp.beta(2,3)
sp.betaln
sp.betaln(2)
sp.betaln(2,3)
beta(2,3)
log(beta(2,3))
q
betaXGreaterBetaY(1,2,3,4)
betaXGreaterBetaY(1,2,3,4)
avgSigmaGauss(1,2)
avgSigmaGauss(1,2)
avgSigmaGauss(12.3,45.6)
help(help)
help("Getting Around")
edit(help)
cap
x = [1 2 3]
find(x>1)
find(x.>1)
find(1.>0)
x = [-4 2 5]
cap(x,2)
x
y=[-4 2 5]
cap(y,2)
y
cap(y,2)
y
y = [-4 2 5]
cap(y,2)
y
x
y
y=[-4 2 5]
y
cap(y,2)
y
isa([0.2], AbstractArray{Real})
isa([0.2], AbstractArray)
help(max)
chi2test
chi2test(1,2)
chi2test([1],2)
chi2test{Real}([1],2)
AbstractVector
isa(1,AbstracVector)
isa(1,AbstractVector)
isa([1],AbstractVector)
typeof([1])
typeof([1 2])
typeof([1,2])
isa([1 2],AbstractVector)
isa([1,2],AbstractVector)
Scalar
typeof(1)
help(Int32)
help(Signed)
help(Integer)
help(Real)
help(Number)
Type{Int32}
typeof(ans)
help(AbstractArray)
argmax(2)
argmax([1 2 3])
argmax([1,2,3])
help(Any)
help(Number)
help(Char)
help(String)
argmax(2)
argmax([2])
argmax(2)
argmax([2])
vec(2)
[2]
ind()
indmax()
indmax(2)
argmax()
argmax([])
indval([])
ones(size[1,2,3])
ones(size([1,2,3]))
typeof(ans)
["hello"]
typeof(ans)
a = [33 2 44; 11 49 6]
logsumexp(a)
logsumexp(a)
logsumexp(a,3)
logsumexp([1,2],3)
a
logsumexp(a, rand(2,3))
logsumexp(a, a)
logsumexp(a, a)
typeof([0:0.1:10])
a
b
r = [0:0.1:10]
typeof(r)
isa(r,AbstractVector)
x
x = [-22 55 6]
cap(x,10)
x
a
mapslices(max,a,1)
bsxfun
rdivide
./
mapslices(sum, a, 1)
condexp(a)
condexp(2)
mapslices(sum,[1,2,3],1)
condexp(2)
condexp([1 2 3])
a
b = [22 -5 6]
condexp(b)
mapslices(max,b,1)
size(b,1)
repmat(b,1,1)
b - ans
exp(ans)
condp(ans)
c = [1 1 1]
condp(c)
max(c)
c ./ 1
c = ans
mapslices(sum,c,1)
sum(c[:])
a
sum(a[:])
sum(a)
General.argmin
quit()
argmin
argmin
General.argmin
g = General
g.argmin
argmin
g
g.argmin
argmin
argmax
c
a
[1 2 3]
typeof(ans)
a = [33 2 44;11 49 6]
b = [22 -5 6]
typeof(b)
isa(AbstractVector, b)
isa(b, AbstractVector)
size(b)
isa(b', AbstractVector)
b'
typeof(b')
size(b')
condexp(a)
g.condexp(a)
g.condexp(b)
g.condp(c)
g.condp(b)
max(b)
b ./ 22
isvector(b)
isvector(b)
b./22
bsxfun(./, ans, sum(ans))
condp(b)
condexp(b)
sum(b)
b
sum(b')
mapslices(sum,b,1)
mapslices(sum,b',1)
condp(b)
condp(b')
condp(vec(b))
vec(b)
condexp(b)
condexp(b')
condexp(b)
condp(b)
condp(b)
b
isvector(b)
b./max(b)
max(b)
b./ans
bsxfun(./,ans,sum(ans))
condp(b)
a
> condexp(a)
condexp(a)
npr.gamma(2,2)
npr.gamma(a, 2)
npr.gamma(a, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2)
npr.gamma(2, 2,)
npr.gamma(2, 2, 2)
npr.gamma(2, 2, 2 2)
npr.gamma(2, 2, 2)
npr.gamma(2, 2, 2)
npr.gamma(2, 2, 2)
npr.gamma(2, 2, 2)
length(b)
dirRand(b,2)
b[1]
npr.gamma(b[1],1,2)
npr.gamma(b[1],1,2)
npr.gamma(b[1],1,1)
npr.gamma(-5,1,1)
npr.gamma(5,1,1)
dirRand([3 12 1], 1, 2)
dirRand([3 12 1], 2)
dirRand([3 12 1], 2)
s
r
s
r
s
s
b[1]
npr.gamma(4,1,2)
dirRand([3 12 1], 2)
s
s
s
s
r = zeros(3,2)
r[1]
r[1, 1]
r[1,:]
dirRand([3 12 1], 2)
s
s
s
npr.gamma(alpha[k],1,n)
s
s
s
r
mapslices(sum,r,1)
repmat(mapslices(sum,r,1),length(alpha),1)
s
dirRand([3 12 1], 2)
dirRand([3 12 1], 2)
dirRand([3 12 1], 2)
zeros(3)
dirrand(zeros(3),2)
dirRand(zeros(3),2)
dirRand(zeros(1,3),2)
zeros(1,3)
b
dirRand(ones(3,3),2)
ones(3,3)
length(ones(3,3))
size(ones(3,3))
a
length(a)
size(a)
size(a,2)
dirRand(ones(3,3),2)
size(ones(3,3),2)
zeros(3,2)
ones(3,3)[1]
ones(3,3)[2]
ones(3,3)[3]
ones(3,3)[4]
dirRand(ones(3),2)
dirRand(ones(3),2)
 dirRand([2 3 4], 2)
dirRand(a,2)
dirRand(ones(3), 2)
g = General
g.dirRand(ones(3), 2)
g.dirRand([2 3 4], 2)
typeof(AbstractVector)
help(AbstractVector)
help(Top)
edit(Top)
Top
typeof(Top)
describe
desc
logsumexp(a)
g.logsumexp(a)
a = [23 -44 16;18 21 0]
b=[-5 9 26]
g.logsumexp(a)
g.logsumexp(b)
g.logsumexp(b)
g.logsumexp(b)
g.logsumexp(a)
b
g.logsumexp(b)
g.logsumexp(vec(b))
abstract NumVector <: AbstractVector 
help(AbstractArray)

a = [2.2 23.3 8.9; 1.1 9.6 4.5]

b = [3.1 2.5 8.8]

c = [6.2, 1.8, 2.5]
logsumexp(a)
g.logsumexp(a)
g.logsumexp(b)
g.logsumexp(vec(b))
g.logsumexp(c)
g.logsumexp(c,2.2)
g.cap(c,3)
g.cap(b,3)
 g.condexp(a)
g.condexp(b)
g.condexp(c)
c
max(c)
c-max(c)
repmat(max(c),length(c),1)
repmat
c.-max(c)
c.condexp(a)
c.condexp(b)
g.condexp(a)
g.condexp(b)
g.condexp(c)
c
condp(exp(c-max(c)))
g.condp(exp(c-max(c)))
g.condp(exp(c-max(c)))
g.condp
g.condexp(c)
g.condexp
mapslices(max,c,1)
c
b
mapslices(max,b,1)
max(b)
mapslices(max,c,2)
repmat(8.8, 3,1)
mapslices(max,c,1)
typeof(ans)
g.condexp
g.condexp(c)
g.condexp
g=General
a
c
a = [2.2 23.3 8.9; 1.1 9.6 4.5]
b = [3.1 2.5 8.8]
c = [6.2, 1.8, 2.5]
g.condexp
g.condexp(c)
typeof(c)
isa(c,Array)
isa(c,AbstractArray)
g.condexp(b)
g.condexp(a)
g.condexp
isa(2,Number)
isa(1.2,Number)
typeof(a)
g.condexp
g.condexp(a)
isa(a,AbstractArray{Number,N})
isa(a,AbstractArray{Number,})
isa(a,AbstractArray{Number})
isa(a,AbstractArray{Number,2})
g.logsumexp(a)
g.logsumexp
g.logsumexp
g.logsumexp(a)
g.logsumexp(a)
g.logsumexp
g.logsumexp(a, ones(size(a)))
g.logsumexp(a, ones(size(a)))
g.logsumexp
g=General
g.logsumexp
g.logsumexp(a)
g.logsumexp(a, ones(size(a)))
g.logsumexp
g.logsumexp(a, ones(size(a)))
g.logsumexp(a)
help(None)
help(Int)
isa(2,Integer)
isa(2,Int)
g.logsumexp 
g.logsumexp
g=General
g.logsumexp
g.logsumexp(a)
g.logsumexp
g.logsumexp
g.logsumexp(a)
isa(a,Array{Float64,2})
isa(a,AbstractArray{Float64,2})
isa(a,AbstractArray{Number,2})
isa(a,AbstractArray{,2})
at
isa(a,AbstractArray{Float64,2})
isa(a,AbstractArray{Float64,Int})
isa(a,NumMatrix) 
isa(a,NumArray)
isa(a,g.NumArray)
g.logsumexp(a)
g.logsumexp
g.logsumexp(a) 
g.logsumexp(b)
g.logsumexp(c)
g.logsumexp(vec(b))
help(String)
help(ASCIIString)
help(DirectIndexString)
help(UTF8String)
using General
logsumexp
logsumexp
using General
logsumexp
isempty([])
isempty()
isempty(0)
isempty
setdiff
setdiff(a,b)
a
b
setdiff(b,c)
c
b
setdiff(b,c)
1+1
a
ndims(a)
Array(Int,2)
dims
ndims
ndims(1)
ndims(2)
ndims([1])
ndims([1,2])
ndims(c)
size(1)
size(c)
size(c,1)
c
tuple(c)
tuple(c...)
ccall((:gethostname, "libc"), Int32, (Ptr{Uint8}, Uint), hostname, length(hostname))
load
loadpath
ENV
LOAD_PATH
ccall
ccall((:argmax, "c:/Users/Shaun/code/julia/project/argmax.dll"), Float64, ())
ccall((:clocl, "libc"), Int32, ())
ccall((:g_type_init, "libgobject-2.0"), Void, ())
ccall((:clock, "libc"), Int32, ())
ccall((:clock, "libc"md), Int32, ())
ccall((:clock, "libcamd"), Int32, ())
ccall((:clock, "c:/libcamd"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd"), Int32, ()
)
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd.dll"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd.dll"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd.dlll"), Int32, ())
ccall((:clock, "C:/users/shaun/programs/julia/lib/julia/libcamd.dll"), Int32, ())
ccall((:, "C:/users/shaun/programs/julia/lib/julia/libcamd.dll"), Int32, ())
